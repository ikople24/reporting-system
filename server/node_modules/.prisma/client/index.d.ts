
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model ListProb
 * 
 */
export type ListProb = $Result.DefaultSelection<Prisma.$ListProbPayload>
/**
 * Model ListUseProb
 * 
 */
export type ListUseProb = $Result.DefaultSelection<Prisma.$ListUseProbPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.listProb`: Exposes CRUD operations for the **ListProb** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ListProbs
    * const listProbs = await prisma.listProb.findMany()
    * ```
    */
  get listProb(): Prisma.ListProbDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.listUseProb`: Exposes CRUD operations for the **ListUseProb** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ListUseProbs
    * const listUseProbs = await prisma.listUseProb.findMany()
    * ```
    */
  get listUseProb(): Prisma.ListUseProbDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    ListProb: 'ListProb',
    ListUseProb: 'ListUseProb'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "listProb" | "listUseProb"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      ListProb: {
        payload: Prisma.$ListProbPayload<ExtArgs>
        fields: Prisma.ListProbFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListProbFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListProbFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload>
          }
          findFirst: {
            args: Prisma.ListProbFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListProbFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload>
          }
          findMany: {
            args: Prisma.ListProbFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload>[]
          }
          create: {
            args: Prisma.ListProbCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload>
          }
          createMany: {
            args: Prisma.ListProbCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ListProbDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload>
          }
          update: {
            args: Prisma.ListProbUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload>
          }
          deleteMany: {
            args: Prisma.ListProbDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ListProbUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ListProbUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListProbPayload>
          }
          aggregate: {
            args: Prisma.ListProbAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateListProb>
          }
          groupBy: {
            args: Prisma.ListProbGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListProbGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ListProbFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ListProbAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ListProbCountArgs<ExtArgs>
            result: $Utils.Optional<ListProbCountAggregateOutputType> | number
          }
        }
      }
      ListUseProb: {
        payload: Prisma.$ListUseProbPayload<ExtArgs>
        fields: Prisma.ListUseProbFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ListUseProbFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ListUseProbFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload>
          }
          findFirst: {
            args: Prisma.ListUseProbFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ListUseProbFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload>
          }
          findMany: {
            args: Prisma.ListUseProbFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload>[]
          }
          create: {
            args: Prisma.ListUseProbCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload>
          }
          createMany: {
            args: Prisma.ListUseProbCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ListUseProbDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload>
          }
          update: {
            args: Prisma.ListUseProbUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload>
          }
          deleteMany: {
            args: Prisma.ListUseProbDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ListUseProbUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ListUseProbUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ListUseProbPayload>
          }
          aggregate: {
            args: Prisma.ListUseProbAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateListUseProb>
          }
          groupBy: {
            args: Prisma.ListUseProbGroupByArgs<ExtArgs>
            result: $Utils.Optional<ListUseProbGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ListUseProbFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ListUseProbAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ListUseProbCountArgs<ExtArgs>
            result: $Utils.Optional<ListUseProbCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    listProb?: ListProbOmit
    listUseProb?: ListUseProbOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ListProbCountOutputType
   */

  export type ListProbCountOutputType = {
    ListUseProb: number
  }

  export type ListProbCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ListUseProb?: boolean | ListProbCountOutputTypeCountListUseProbArgs
  }

  // Custom InputTypes
  /**
   * ListProbCountOutputType without action
   */
  export type ListProbCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProbCountOutputType
     */
    select?: ListProbCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ListProbCountOutputType without action
   */
  export type ListProbCountOutputTypeCountListUseProbArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListUseProbWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    clerkId: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    UpdateAt: Date | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    clerkId: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    UpdateAt: Date | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    clerkId: number
    firstname: number
    lastname: number
    email: number
    UpdateAt: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    clerkId?: true
    firstname?: true
    lastname?: true
    email?: true
    UpdateAt?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    clerkId?: true
    firstname?: true
    lastname?: true
    email?: true
    UpdateAt?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    clerkId?: true
    firstname?: true
    lastname?: true
    email?: true
    UpdateAt?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    clerkId: string
    firstname: string
    lastname: string
    email: string
    UpdateAt: Date
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clerkId?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    UpdateAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    clerkId?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    UpdateAt?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clerkId" | "firstname" | "lastname" | "email" | "UpdateAt" | "createdAt", ExtArgs["result"]["user"]>

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clerkId: string
      firstname: string
      lastname: string
      email: string
      UpdateAt: Date
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly clerkId: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly UpdateAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
  }


  /**
   * Model ListProb
   */

  export type AggregateListProb = {
    _count: ListProbCountAggregateOutputType | null
    _avg: ListProbAvgAggregateOutputType | null
    _sum: ListProbSumAggregateOutputType | null
    _min: ListProbMinAggregateOutputType | null
    _max: ListProbMaxAggregateOutputType | null
  }

  export type ListProbAvgAggregateOutputType = {
    DP_Order: number | null
  }

  export type ListProbSumAggregateOutputType = {
    DP_Order: number | null
  }

  export type ListProbMinAggregateOutputType = {
    id: string | null
    Prob_name: string | null
    DP_Order: number | null
    Prob_pic: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ListProbMaxAggregateOutputType = {
    id: string | null
    Prob_name: string | null
    DP_Order: number | null
    Prob_pic: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ListProbCountAggregateOutputType = {
    id: number
    Prob_name: number
    DP_Order: number
    Prob_pic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ListProbAvgAggregateInputType = {
    DP_Order?: true
  }

  export type ListProbSumAggregateInputType = {
    DP_Order?: true
  }

  export type ListProbMinAggregateInputType = {
    id?: true
    Prob_name?: true
    DP_Order?: true
    Prob_pic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ListProbMaxAggregateInputType = {
    id?: true
    Prob_name?: true
    DP_Order?: true
    Prob_pic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ListProbCountAggregateInputType = {
    id?: true
    Prob_name?: true
    DP_Order?: true
    Prob_pic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ListProbAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListProb to aggregate.
     */
    where?: ListProbWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListProbs to fetch.
     */
    orderBy?: ListProbOrderByWithRelationInput | ListProbOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListProbWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListProbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListProbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ListProbs
    **/
    _count?: true | ListProbCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ListProbAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ListProbSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListProbMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListProbMaxAggregateInputType
  }

  export type GetListProbAggregateType<T extends ListProbAggregateArgs> = {
        [P in keyof T & keyof AggregateListProb]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListProb[P]>
      : GetScalarType<T[P], AggregateListProb[P]>
  }




  export type ListProbGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListProbWhereInput
    orderBy?: ListProbOrderByWithAggregationInput | ListProbOrderByWithAggregationInput[]
    by: ListProbScalarFieldEnum[] | ListProbScalarFieldEnum
    having?: ListProbScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListProbCountAggregateInputType | true
    _avg?: ListProbAvgAggregateInputType
    _sum?: ListProbSumAggregateInputType
    _min?: ListProbMinAggregateInputType
    _max?: ListProbMaxAggregateInputType
  }

  export type ListProbGroupByOutputType = {
    id: string
    Prob_name: string
    DP_Order: number
    Prob_pic: string
    createdAt: Date
    updatedAt: Date
    _count: ListProbCountAggregateOutputType | null
    _avg: ListProbAvgAggregateOutputType | null
    _sum: ListProbSumAggregateOutputType | null
    _min: ListProbMinAggregateOutputType | null
    _max: ListProbMaxAggregateOutputType | null
  }

  type GetListProbGroupByPayload<T extends ListProbGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListProbGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListProbGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListProbGroupByOutputType[P]>
            : GetScalarType<T[P], ListProbGroupByOutputType[P]>
        }
      >
    >


  export type ListProbSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Prob_name?: boolean
    DP_Order?: boolean
    Prob_pic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ListUseProb?: boolean | ListProb$ListUseProbArgs<ExtArgs>
    _count?: boolean | ListProbCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listProb"]>



  export type ListProbSelectScalar = {
    id?: boolean
    Prob_name?: boolean
    DP_Order?: boolean
    Prob_pic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ListProbOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Prob_name" | "DP_Order" | "Prob_pic" | "createdAt" | "updatedAt", ExtArgs["result"]["listProb"]>
  export type ListProbInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ListUseProb?: boolean | ListProb$ListUseProbArgs<ExtArgs>
    _count?: boolean | ListProbCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ListProbPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ListProb"
    objects: {
      ListUseProb: Prisma.$ListUseProbPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Prob_name: string
      DP_Order: number
      Prob_pic: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["listProb"]>
    composites: {}
  }

  type ListProbGetPayload<S extends boolean | null | undefined | ListProbDefaultArgs> = $Result.GetResult<Prisma.$ListProbPayload, S>

  type ListProbCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ListProbFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ListProbCountAggregateInputType | true
    }

  export interface ListProbDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ListProb'], meta: { name: 'ListProb' } }
    /**
     * Find zero or one ListProb that matches the filter.
     * @param {ListProbFindUniqueArgs} args - Arguments to find a ListProb
     * @example
     * // Get one ListProb
     * const listProb = await prisma.listProb.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ListProbFindUniqueArgs>(args: SelectSubset<T, ListProbFindUniqueArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ListProb that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ListProbFindUniqueOrThrowArgs} args - Arguments to find a ListProb
     * @example
     * // Get one ListProb
     * const listProb = await prisma.listProb.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ListProbFindUniqueOrThrowArgs>(args: SelectSubset<T, ListProbFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ListProb that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListProbFindFirstArgs} args - Arguments to find a ListProb
     * @example
     * // Get one ListProb
     * const listProb = await prisma.listProb.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ListProbFindFirstArgs>(args?: SelectSubset<T, ListProbFindFirstArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ListProb that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListProbFindFirstOrThrowArgs} args - Arguments to find a ListProb
     * @example
     * // Get one ListProb
     * const listProb = await prisma.listProb.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ListProbFindFirstOrThrowArgs>(args?: SelectSubset<T, ListProbFindFirstOrThrowArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ListProbs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListProbFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ListProbs
     * const listProbs = await prisma.listProb.findMany()
     * 
     * // Get first 10 ListProbs
     * const listProbs = await prisma.listProb.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listProbWithIdOnly = await prisma.listProb.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ListProbFindManyArgs>(args?: SelectSubset<T, ListProbFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ListProb.
     * @param {ListProbCreateArgs} args - Arguments to create a ListProb.
     * @example
     * // Create one ListProb
     * const ListProb = await prisma.listProb.create({
     *   data: {
     *     // ... data to create a ListProb
     *   }
     * })
     * 
     */
    create<T extends ListProbCreateArgs>(args: SelectSubset<T, ListProbCreateArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ListProbs.
     * @param {ListProbCreateManyArgs} args - Arguments to create many ListProbs.
     * @example
     * // Create many ListProbs
     * const listProb = await prisma.listProb.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ListProbCreateManyArgs>(args?: SelectSubset<T, ListProbCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ListProb.
     * @param {ListProbDeleteArgs} args - Arguments to delete one ListProb.
     * @example
     * // Delete one ListProb
     * const ListProb = await prisma.listProb.delete({
     *   where: {
     *     // ... filter to delete one ListProb
     *   }
     * })
     * 
     */
    delete<T extends ListProbDeleteArgs>(args: SelectSubset<T, ListProbDeleteArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ListProb.
     * @param {ListProbUpdateArgs} args - Arguments to update one ListProb.
     * @example
     * // Update one ListProb
     * const listProb = await prisma.listProb.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ListProbUpdateArgs>(args: SelectSubset<T, ListProbUpdateArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ListProbs.
     * @param {ListProbDeleteManyArgs} args - Arguments to filter ListProbs to delete.
     * @example
     * // Delete a few ListProbs
     * const { count } = await prisma.listProb.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ListProbDeleteManyArgs>(args?: SelectSubset<T, ListProbDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ListProbs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListProbUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ListProbs
     * const listProb = await prisma.listProb.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ListProbUpdateManyArgs>(args: SelectSubset<T, ListProbUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ListProb.
     * @param {ListProbUpsertArgs} args - Arguments to update or create a ListProb.
     * @example
     * // Update or create a ListProb
     * const listProb = await prisma.listProb.upsert({
     *   create: {
     *     // ... data to create a ListProb
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ListProb we want to update
     *   }
     * })
     */
    upsert<T extends ListProbUpsertArgs>(args: SelectSubset<T, ListProbUpsertArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ListProbs that matches the filter.
     * @param {ListProbFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const listProb = await prisma.listProb.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ListProbFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ListProb.
     * @param {ListProbAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const listProb = await prisma.listProb.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ListProbAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ListProbs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListProbCountArgs} args - Arguments to filter ListProbs to count.
     * @example
     * // Count the number of ListProbs
     * const count = await prisma.listProb.count({
     *   where: {
     *     // ... the filter for the ListProbs we want to count
     *   }
     * })
    **/
    count<T extends ListProbCountArgs>(
      args?: Subset<T, ListProbCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListProbCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ListProb.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListProbAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListProbAggregateArgs>(args: Subset<T, ListProbAggregateArgs>): Prisma.PrismaPromise<GetListProbAggregateType<T>>

    /**
     * Group by ListProb.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListProbGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListProbGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListProbGroupByArgs['orderBy'] }
        : { orderBy?: ListProbGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListProbGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListProbGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ListProb model
   */
  readonly fields: ListProbFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ListProb.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListProbClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ListUseProb<T extends ListProb$ListUseProbArgs<ExtArgs> = {}>(args?: Subset<T, ListProb$ListUseProbArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ListProb model
   */
  interface ListProbFieldRefs {
    readonly id: FieldRef<"ListProb", 'String'>
    readonly Prob_name: FieldRef<"ListProb", 'String'>
    readonly DP_Order: FieldRef<"ListProb", 'Int'>
    readonly Prob_pic: FieldRef<"ListProb", 'String'>
    readonly createdAt: FieldRef<"ListProb", 'DateTime'>
    readonly updatedAt: FieldRef<"ListProb", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ListProb findUnique
   */
  export type ListProbFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * Filter, which ListProb to fetch.
     */
    where: ListProbWhereUniqueInput
  }

  /**
   * ListProb findUniqueOrThrow
   */
  export type ListProbFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * Filter, which ListProb to fetch.
     */
    where: ListProbWhereUniqueInput
  }

  /**
   * ListProb findFirst
   */
  export type ListProbFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * Filter, which ListProb to fetch.
     */
    where?: ListProbWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListProbs to fetch.
     */
    orderBy?: ListProbOrderByWithRelationInput | ListProbOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListProbs.
     */
    cursor?: ListProbWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListProbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListProbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListProbs.
     */
    distinct?: ListProbScalarFieldEnum | ListProbScalarFieldEnum[]
  }

  /**
   * ListProb findFirstOrThrow
   */
  export type ListProbFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * Filter, which ListProb to fetch.
     */
    where?: ListProbWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListProbs to fetch.
     */
    orderBy?: ListProbOrderByWithRelationInput | ListProbOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListProbs.
     */
    cursor?: ListProbWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListProbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListProbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListProbs.
     */
    distinct?: ListProbScalarFieldEnum | ListProbScalarFieldEnum[]
  }

  /**
   * ListProb findMany
   */
  export type ListProbFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * Filter, which ListProbs to fetch.
     */
    where?: ListProbWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListProbs to fetch.
     */
    orderBy?: ListProbOrderByWithRelationInput | ListProbOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ListProbs.
     */
    cursor?: ListProbWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListProbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListProbs.
     */
    skip?: number
    distinct?: ListProbScalarFieldEnum | ListProbScalarFieldEnum[]
  }

  /**
   * ListProb create
   */
  export type ListProbCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * The data needed to create a ListProb.
     */
    data: XOR<ListProbCreateInput, ListProbUncheckedCreateInput>
  }

  /**
   * ListProb createMany
   */
  export type ListProbCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ListProbs.
     */
    data: ListProbCreateManyInput | ListProbCreateManyInput[]
  }

  /**
   * ListProb update
   */
  export type ListProbUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * The data needed to update a ListProb.
     */
    data: XOR<ListProbUpdateInput, ListProbUncheckedUpdateInput>
    /**
     * Choose, which ListProb to update.
     */
    where: ListProbWhereUniqueInput
  }

  /**
   * ListProb updateMany
   */
  export type ListProbUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ListProbs.
     */
    data: XOR<ListProbUpdateManyMutationInput, ListProbUncheckedUpdateManyInput>
    /**
     * Filter which ListProbs to update
     */
    where?: ListProbWhereInput
    /**
     * Limit how many ListProbs to update.
     */
    limit?: number
  }

  /**
   * ListProb upsert
   */
  export type ListProbUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * The filter to search for the ListProb to update in case it exists.
     */
    where: ListProbWhereUniqueInput
    /**
     * In case the ListProb found by the `where` argument doesn't exist, create a new ListProb with this data.
     */
    create: XOR<ListProbCreateInput, ListProbUncheckedCreateInput>
    /**
     * In case the ListProb was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListProbUpdateInput, ListProbUncheckedUpdateInput>
  }

  /**
   * ListProb delete
   */
  export type ListProbDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
    /**
     * Filter which ListProb to delete.
     */
    where: ListProbWhereUniqueInput
  }

  /**
   * ListProb deleteMany
   */
  export type ListProbDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListProbs to delete
     */
    where?: ListProbWhereInput
    /**
     * Limit how many ListProbs to delete.
     */
    limit?: number
  }

  /**
   * ListProb findRaw
   */
  export type ListProbFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ListProb aggregateRaw
   */
  export type ListProbAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ListProb.ListUseProb
   */
  export type ListProb$ListUseProbArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    where?: ListUseProbWhereInput
    orderBy?: ListUseProbOrderByWithRelationInput | ListUseProbOrderByWithRelationInput[]
    cursor?: ListUseProbWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ListUseProbScalarFieldEnum | ListUseProbScalarFieldEnum[]
  }

  /**
   * ListProb without action
   */
  export type ListProbDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListProb
     */
    select?: ListProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListProb
     */
    omit?: ListProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListProbInclude<ExtArgs> | null
  }


  /**
   * Model ListUseProb
   */

  export type AggregateListUseProb = {
    _count: ListUseProbCountAggregateOutputType | null
    _min: ListUseProbMinAggregateOutputType | null
    _max: ListUseProbMaxAggregateOutputType | null
  }

  export type ListUseProbMinAggregateOutputType = {
    id: string | null
    Prob_menu: string | null
    Prob_pickup: string | null
    pick_icon: string | null
    listProbId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ListUseProbMaxAggregateOutputType = {
    id: string | null
    Prob_menu: string | null
    Prob_pickup: string | null
    pick_icon: string | null
    listProbId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ListUseProbCountAggregateOutputType = {
    id: number
    Prob_menu: number
    Prob_pickup: number
    pick_icon: number
    listProbId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ListUseProbMinAggregateInputType = {
    id?: true
    Prob_menu?: true
    Prob_pickup?: true
    pick_icon?: true
    listProbId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ListUseProbMaxAggregateInputType = {
    id?: true
    Prob_menu?: true
    Prob_pickup?: true
    pick_icon?: true
    listProbId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ListUseProbCountAggregateInputType = {
    id?: true
    Prob_menu?: true
    Prob_pickup?: true
    pick_icon?: true
    listProbId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ListUseProbAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListUseProb to aggregate.
     */
    where?: ListUseProbWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListUseProbs to fetch.
     */
    orderBy?: ListUseProbOrderByWithRelationInput | ListUseProbOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ListUseProbWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListUseProbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListUseProbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ListUseProbs
    **/
    _count?: true | ListUseProbCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ListUseProbMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ListUseProbMaxAggregateInputType
  }

  export type GetListUseProbAggregateType<T extends ListUseProbAggregateArgs> = {
        [P in keyof T & keyof AggregateListUseProb]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateListUseProb[P]>
      : GetScalarType<T[P], AggregateListUseProb[P]>
  }




  export type ListUseProbGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ListUseProbWhereInput
    orderBy?: ListUseProbOrderByWithAggregationInput | ListUseProbOrderByWithAggregationInput[]
    by: ListUseProbScalarFieldEnum[] | ListUseProbScalarFieldEnum
    having?: ListUseProbScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ListUseProbCountAggregateInputType | true
    _min?: ListUseProbMinAggregateInputType
    _max?: ListUseProbMaxAggregateInputType
  }

  export type ListUseProbGroupByOutputType = {
    id: string
    Prob_menu: string
    Prob_pickup: string
    pick_icon: string
    listProbId: string
    createdAt: Date
    updatedAt: Date
    _count: ListUseProbCountAggregateOutputType | null
    _min: ListUseProbMinAggregateOutputType | null
    _max: ListUseProbMaxAggregateOutputType | null
  }

  type GetListUseProbGroupByPayload<T extends ListUseProbGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ListUseProbGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ListUseProbGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ListUseProbGroupByOutputType[P]>
            : GetScalarType<T[P], ListUseProbGroupByOutputType[P]>
        }
      >
    >


  export type ListUseProbSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Prob_menu?: boolean
    Prob_pickup?: boolean
    pick_icon?: boolean
    listProbId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ListProb?: boolean | ListProbDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["listUseProb"]>



  export type ListUseProbSelectScalar = {
    id?: boolean
    Prob_menu?: boolean
    Prob_pickup?: boolean
    pick_icon?: boolean
    listProbId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ListUseProbOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "Prob_menu" | "Prob_pickup" | "pick_icon" | "listProbId" | "createdAt" | "updatedAt", ExtArgs["result"]["listUseProb"]>
  export type ListUseProbInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ListProb?: boolean | ListProbDefaultArgs<ExtArgs>
  }

  export type $ListUseProbPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ListUseProb"
    objects: {
      ListProb: Prisma.$ListProbPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      Prob_menu: string
      Prob_pickup: string
      pick_icon: string
      listProbId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["listUseProb"]>
    composites: {}
  }

  type ListUseProbGetPayload<S extends boolean | null | undefined | ListUseProbDefaultArgs> = $Result.GetResult<Prisma.$ListUseProbPayload, S>

  type ListUseProbCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ListUseProbFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ListUseProbCountAggregateInputType | true
    }

  export interface ListUseProbDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ListUseProb'], meta: { name: 'ListUseProb' } }
    /**
     * Find zero or one ListUseProb that matches the filter.
     * @param {ListUseProbFindUniqueArgs} args - Arguments to find a ListUseProb
     * @example
     * // Get one ListUseProb
     * const listUseProb = await prisma.listUseProb.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ListUseProbFindUniqueArgs>(args: SelectSubset<T, ListUseProbFindUniqueArgs<ExtArgs>>): Prisma__ListUseProbClient<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ListUseProb that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ListUseProbFindUniqueOrThrowArgs} args - Arguments to find a ListUseProb
     * @example
     * // Get one ListUseProb
     * const listUseProb = await prisma.listUseProb.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ListUseProbFindUniqueOrThrowArgs>(args: SelectSubset<T, ListUseProbFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ListUseProbClient<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ListUseProb that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUseProbFindFirstArgs} args - Arguments to find a ListUseProb
     * @example
     * // Get one ListUseProb
     * const listUseProb = await prisma.listUseProb.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ListUseProbFindFirstArgs>(args?: SelectSubset<T, ListUseProbFindFirstArgs<ExtArgs>>): Prisma__ListUseProbClient<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ListUseProb that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUseProbFindFirstOrThrowArgs} args - Arguments to find a ListUseProb
     * @example
     * // Get one ListUseProb
     * const listUseProb = await prisma.listUseProb.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ListUseProbFindFirstOrThrowArgs>(args?: SelectSubset<T, ListUseProbFindFirstOrThrowArgs<ExtArgs>>): Prisma__ListUseProbClient<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ListUseProbs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUseProbFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ListUseProbs
     * const listUseProbs = await prisma.listUseProb.findMany()
     * 
     * // Get first 10 ListUseProbs
     * const listUseProbs = await prisma.listUseProb.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listUseProbWithIdOnly = await prisma.listUseProb.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ListUseProbFindManyArgs>(args?: SelectSubset<T, ListUseProbFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ListUseProb.
     * @param {ListUseProbCreateArgs} args - Arguments to create a ListUseProb.
     * @example
     * // Create one ListUseProb
     * const ListUseProb = await prisma.listUseProb.create({
     *   data: {
     *     // ... data to create a ListUseProb
     *   }
     * })
     * 
     */
    create<T extends ListUseProbCreateArgs>(args: SelectSubset<T, ListUseProbCreateArgs<ExtArgs>>): Prisma__ListUseProbClient<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ListUseProbs.
     * @param {ListUseProbCreateManyArgs} args - Arguments to create many ListUseProbs.
     * @example
     * // Create many ListUseProbs
     * const listUseProb = await prisma.listUseProb.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ListUseProbCreateManyArgs>(args?: SelectSubset<T, ListUseProbCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ListUseProb.
     * @param {ListUseProbDeleteArgs} args - Arguments to delete one ListUseProb.
     * @example
     * // Delete one ListUseProb
     * const ListUseProb = await prisma.listUseProb.delete({
     *   where: {
     *     // ... filter to delete one ListUseProb
     *   }
     * })
     * 
     */
    delete<T extends ListUseProbDeleteArgs>(args: SelectSubset<T, ListUseProbDeleteArgs<ExtArgs>>): Prisma__ListUseProbClient<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ListUseProb.
     * @param {ListUseProbUpdateArgs} args - Arguments to update one ListUseProb.
     * @example
     * // Update one ListUseProb
     * const listUseProb = await prisma.listUseProb.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ListUseProbUpdateArgs>(args: SelectSubset<T, ListUseProbUpdateArgs<ExtArgs>>): Prisma__ListUseProbClient<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ListUseProbs.
     * @param {ListUseProbDeleteManyArgs} args - Arguments to filter ListUseProbs to delete.
     * @example
     * // Delete a few ListUseProbs
     * const { count } = await prisma.listUseProb.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ListUseProbDeleteManyArgs>(args?: SelectSubset<T, ListUseProbDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ListUseProbs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUseProbUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ListUseProbs
     * const listUseProb = await prisma.listUseProb.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ListUseProbUpdateManyArgs>(args: SelectSubset<T, ListUseProbUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ListUseProb.
     * @param {ListUseProbUpsertArgs} args - Arguments to update or create a ListUseProb.
     * @example
     * // Update or create a ListUseProb
     * const listUseProb = await prisma.listUseProb.upsert({
     *   create: {
     *     // ... data to create a ListUseProb
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ListUseProb we want to update
     *   }
     * })
     */
    upsert<T extends ListUseProbUpsertArgs>(args: SelectSubset<T, ListUseProbUpsertArgs<ExtArgs>>): Prisma__ListUseProbClient<$Result.GetResult<Prisma.$ListUseProbPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ListUseProbs that matches the filter.
     * @param {ListUseProbFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const listUseProb = await prisma.listUseProb.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ListUseProbFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ListUseProb.
     * @param {ListUseProbAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const listUseProb = await prisma.listUseProb.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ListUseProbAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ListUseProbs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUseProbCountArgs} args - Arguments to filter ListUseProbs to count.
     * @example
     * // Count the number of ListUseProbs
     * const count = await prisma.listUseProb.count({
     *   where: {
     *     // ... the filter for the ListUseProbs we want to count
     *   }
     * })
    **/
    count<T extends ListUseProbCountArgs>(
      args?: Subset<T, ListUseProbCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListUseProbCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ListUseProb.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUseProbAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListUseProbAggregateArgs>(args: Subset<T, ListUseProbAggregateArgs>): Prisma.PrismaPromise<GetListUseProbAggregateType<T>>

    /**
     * Group by ListUseProb.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListUseProbGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListUseProbGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListUseProbGroupByArgs['orderBy'] }
        : { orderBy?: ListUseProbGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListUseProbGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListUseProbGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ListUseProb model
   */
  readonly fields: ListUseProbFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ListUseProb.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ListUseProbClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ListProb<T extends ListProbDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ListProbDefaultArgs<ExtArgs>>): Prisma__ListProbClient<$Result.GetResult<Prisma.$ListProbPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ListUseProb model
   */
  interface ListUseProbFieldRefs {
    readonly id: FieldRef<"ListUseProb", 'String'>
    readonly Prob_menu: FieldRef<"ListUseProb", 'String'>
    readonly Prob_pickup: FieldRef<"ListUseProb", 'String'>
    readonly pick_icon: FieldRef<"ListUseProb", 'String'>
    readonly listProbId: FieldRef<"ListUseProb", 'String'>
    readonly createdAt: FieldRef<"ListUseProb", 'DateTime'>
    readonly updatedAt: FieldRef<"ListUseProb", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ListUseProb findUnique
   */
  export type ListUseProbFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * Filter, which ListUseProb to fetch.
     */
    where: ListUseProbWhereUniqueInput
  }

  /**
   * ListUseProb findUniqueOrThrow
   */
  export type ListUseProbFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * Filter, which ListUseProb to fetch.
     */
    where: ListUseProbWhereUniqueInput
  }

  /**
   * ListUseProb findFirst
   */
  export type ListUseProbFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * Filter, which ListUseProb to fetch.
     */
    where?: ListUseProbWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListUseProbs to fetch.
     */
    orderBy?: ListUseProbOrderByWithRelationInput | ListUseProbOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListUseProbs.
     */
    cursor?: ListUseProbWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListUseProbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListUseProbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListUseProbs.
     */
    distinct?: ListUseProbScalarFieldEnum | ListUseProbScalarFieldEnum[]
  }

  /**
   * ListUseProb findFirstOrThrow
   */
  export type ListUseProbFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * Filter, which ListUseProb to fetch.
     */
    where?: ListUseProbWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListUseProbs to fetch.
     */
    orderBy?: ListUseProbOrderByWithRelationInput | ListUseProbOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ListUseProbs.
     */
    cursor?: ListUseProbWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListUseProbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListUseProbs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ListUseProbs.
     */
    distinct?: ListUseProbScalarFieldEnum | ListUseProbScalarFieldEnum[]
  }

  /**
   * ListUseProb findMany
   */
  export type ListUseProbFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * Filter, which ListUseProbs to fetch.
     */
    where?: ListUseProbWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ListUseProbs to fetch.
     */
    orderBy?: ListUseProbOrderByWithRelationInput | ListUseProbOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ListUseProbs.
     */
    cursor?: ListUseProbWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ListUseProbs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ListUseProbs.
     */
    skip?: number
    distinct?: ListUseProbScalarFieldEnum | ListUseProbScalarFieldEnum[]
  }

  /**
   * ListUseProb create
   */
  export type ListUseProbCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * The data needed to create a ListUseProb.
     */
    data: XOR<ListUseProbCreateInput, ListUseProbUncheckedCreateInput>
  }

  /**
   * ListUseProb createMany
   */
  export type ListUseProbCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ListUseProbs.
     */
    data: ListUseProbCreateManyInput | ListUseProbCreateManyInput[]
  }

  /**
   * ListUseProb update
   */
  export type ListUseProbUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * The data needed to update a ListUseProb.
     */
    data: XOR<ListUseProbUpdateInput, ListUseProbUncheckedUpdateInput>
    /**
     * Choose, which ListUseProb to update.
     */
    where: ListUseProbWhereUniqueInput
  }

  /**
   * ListUseProb updateMany
   */
  export type ListUseProbUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ListUseProbs.
     */
    data: XOR<ListUseProbUpdateManyMutationInput, ListUseProbUncheckedUpdateManyInput>
    /**
     * Filter which ListUseProbs to update
     */
    where?: ListUseProbWhereInput
    /**
     * Limit how many ListUseProbs to update.
     */
    limit?: number
  }

  /**
   * ListUseProb upsert
   */
  export type ListUseProbUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * The filter to search for the ListUseProb to update in case it exists.
     */
    where: ListUseProbWhereUniqueInput
    /**
     * In case the ListUseProb found by the `where` argument doesn't exist, create a new ListUseProb with this data.
     */
    create: XOR<ListUseProbCreateInput, ListUseProbUncheckedCreateInput>
    /**
     * In case the ListUseProb was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ListUseProbUpdateInput, ListUseProbUncheckedUpdateInput>
  }

  /**
   * ListUseProb delete
   */
  export type ListUseProbDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
    /**
     * Filter which ListUseProb to delete.
     */
    where: ListUseProbWhereUniqueInput
  }

  /**
   * ListUseProb deleteMany
   */
  export type ListUseProbDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ListUseProbs to delete
     */
    where?: ListUseProbWhereInput
    /**
     * Limit how many ListUseProbs to delete.
     */
    limit?: number
  }

  /**
   * ListUseProb findRaw
   */
  export type ListUseProbFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ListUseProb aggregateRaw
   */
  export type ListUseProbAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ListUseProb without action
   */
  export type ListUseProbDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ListUseProb
     */
    select?: ListUseProbSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ListUseProb
     */
    omit?: ListUseProbOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ListUseProbInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    clerkId: 'clerkId',
    firstname: 'firstname',
    lastname: 'lastname',
    email: 'email',
    UpdateAt: 'UpdateAt',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ListProbScalarFieldEnum: {
    id: 'id',
    Prob_name: 'Prob_name',
    DP_Order: 'DP_Order',
    Prob_pic: 'Prob_pic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ListProbScalarFieldEnum = (typeof ListProbScalarFieldEnum)[keyof typeof ListProbScalarFieldEnum]


  export const ListUseProbScalarFieldEnum: {
    id: 'id',
    Prob_menu: 'Prob_menu',
    Prob_pickup: 'Prob_pickup',
    pick_icon: 'pick_icon',
    listProbId: 'listProbId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ListUseProbScalarFieldEnum = (typeof ListUseProbScalarFieldEnum)[keyof typeof ListUseProbScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    clerkId?: StringFilter<"User"> | string
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    UpdateAt?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    UpdateAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    clerkId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    UpdateAt?: DateTimeFilter<"User"> | Date | string
    createdAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "clerkId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    UpdateAt?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    clerkId?: StringWithAggregatesFilter<"User"> | string
    firstname?: StringWithAggregatesFilter<"User"> | string
    lastname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    UpdateAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ListProbWhereInput = {
    AND?: ListProbWhereInput | ListProbWhereInput[]
    OR?: ListProbWhereInput[]
    NOT?: ListProbWhereInput | ListProbWhereInput[]
    id?: StringFilter<"ListProb"> | string
    Prob_name?: StringFilter<"ListProb"> | string
    DP_Order?: IntFilter<"ListProb"> | number
    Prob_pic?: StringFilter<"ListProb"> | string
    createdAt?: DateTimeFilter<"ListProb"> | Date | string
    updatedAt?: DateTimeFilter<"ListProb"> | Date | string
    ListUseProb?: ListUseProbListRelationFilter
  }

  export type ListProbOrderByWithRelationInput = {
    id?: SortOrder
    Prob_name?: SortOrder
    DP_Order?: SortOrder
    Prob_pic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ListUseProb?: ListUseProbOrderByRelationAggregateInput
  }

  export type ListProbWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ListProbWhereInput | ListProbWhereInput[]
    OR?: ListProbWhereInput[]
    NOT?: ListProbWhereInput | ListProbWhereInput[]
    Prob_name?: StringFilter<"ListProb"> | string
    DP_Order?: IntFilter<"ListProb"> | number
    Prob_pic?: StringFilter<"ListProb"> | string
    createdAt?: DateTimeFilter<"ListProb"> | Date | string
    updatedAt?: DateTimeFilter<"ListProb"> | Date | string
    ListUseProb?: ListUseProbListRelationFilter
  }, "id">

  export type ListProbOrderByWithAggregationInput = {
    id?: SortOrder
    Prob_name?: SortOrder
    DP_Order?: SortOrder
    Prob_pic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ListProbCountOrderByAggregateInput
    _avg?: ListProbAvgOrderByAggregateInput
    _max?: ListProbMaxOrderByAggregateInput
    _min?: ListProbMinOrderByAggregateInput
    _sum?: ListProbSumOrderByAggregateInput
  }

  export type ListProbScalarWhereWithAggregatesInput = {
    AND?: ListProbScalarWhereWithAggregatesInput | ListProbScalarWhereWithAggregatesInput[]
    OR?: ListProbScalarWhereWithAggregatesInput[]
    NOT?: ListProbScalarWhereWithAggregatesInput | ListProbScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ListProb"> | string
    Prob_name?: StringWithAggregatesFilter<"ListProb"> | string
    DP_Order?: IntWithAggregatesFilter<"ListProb"> | number
    Prob_pic?: StringWithAggregatesFilter<"ListProb"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ListProb"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ListProb"> | Date | string
  }

  export type ListUseProbWhereInput = {
    AND?: ListUseProbWhereInput | ListUseProbWhereInput[]
    OR?: ListUseProbWhereInput[]
    NOT?: ListUseProbWhereInput | ListUseProbWhereInput[]
    id?: StringFilter<"ListUseProb"> | string
    Prob_menu?: StringFilter<"ListUseProb"> | string
    Prob_pickup?: StringFilter<"ListUseProb"> | string
    pick_icon?: StringFilter<"ListUseProb"> | string
    listProbId?: StringFilter<"ListUseProb"> | string
    createdAt?: DateTimeFilter<"ListUseProb"> | Date | string
    updatedAt?: DateTimeFilter<"ListUseProb"> | Date | string
    ListProb?: XOR<ListProbScalarRelationFilter, ListProbWhereInput>
  }

  export type ListUseProbOrderByWithRelationInput = {
    id?: SortOrder
    Prob_menu?: SortOrder
    Prob_pickup?: SortOrder
    pick_icon?: SortOrder
    listProbId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ListProb?: ListProbOrderByWithRelationInput
  }

  export type ListUseProbWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ListUseProbWhereInput | ListUseProbWhereInput[]
    OR?: ListUseProbWhereInput[]
    NOT?: ListUseProbWhereInput | ListUseProbWhereInput[]
    Prob_menu?: StringFilter<"ListUseProb"> | string
    Prob_pickup?: StringFilter<"ListUseProb"> | string
    pick_icon?: StringFilter<"ListUseProb"> | string
    listProbId?: StringFilter<"ListUseProb"> | string
    createdAt?: DateTimeFilter<"ListUseProb"> | Date | string
    updatedAt?: DateTimeFilter<"ListUseProb"> | Date | string
    ListProb?: XOR<ListProbScalarRelationFilter, ListProbWhereInput>
  }, "id">

  export type ListUseProbOrderByWithAggregationInput = {
    id?: SortOrder
    Prob_menu?: SortOrder
    Prob_pickup?: SortOrder
    pick_icon?: SortOrder
    listProbId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ListUseProbCountOrderByAggregateInput
    _max?: ListUseProbMaxOrderByAggregateInput
    _min?: ListUseProbMinOrderByAggregateInput
  }

  export type ListUseProbScalarWhereWithAggregatesInput = {
    AND?: ListUseProbScalarWhereWithAggregatesInput | ListUseProbScalarWhereWithAggregatesInput[]
    OR?: ListUseProbScalarWhereWithAggregatesInput[]
    NOT?: ListUseProbScalarWhereWithAggregatesInput | ListUseProbScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ListUseProb"> | string
    Prob_menu?: StringWithAggregatesFilter<"ListUseProb"> | string
    Prob_pickup?: StringWithAggregatesFilter<"ListUseProb"> | string
    pick_icon?: StringWithAggregatesFilter<"ListUseProb"> | string
    listProbId?: StringWithAggregatesFilter<"ListUseProb"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ListUseProb"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ListUseProb"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    clerkId: string
    firstname: string
    lastname: string
    email: string
    UpdateAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    clerkId: string
    firstname: string
    lastname: string
    email: string
    UpdateAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUpdateInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    UpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    UpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    clerkId: string
    firstname: string
    lastname: string
    email: string
    UpdateAt?: Date | string
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    UpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    clerkId?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    UpdateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListProbCreateInput = {
    id?: string
    Prob_name: string
    DP_Order: number
    Prob_pic: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ListUseProb?: ListUseProbCreateNestedManyWithoutListProbInput
  }

  export type ListProbUncheckedCreateInput = {
    id?: string
    Prob_name: string
    DP_Order: number
    Prob_pic: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ListUseProb?: ListUseProbUncheckedCreateNestedManyWithoutListProbInput
  }

  export type ListProbUpdateInput = {
    Prob_name?: StringFieldUpdateOperationsInput | string
    DP_Order?: IntFieldUpdateOperationsInput | number
    Prob_pic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ListUseProb?: ListUseProbUpdateManyWithoutListProbNestedInput
  }

  export type ListProbUncheckedUpdateInput = {
    Prob_name?: StringFieldUpdateOperationsInput | string
    DP_Order?: IntFieldUpdateOperationsInput | number
    Prob_pic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ListUseProb?: ListUseProbUncheckedUpdateManyWithoutListProbNestedInput
  }

  export type ListProbCreateManyInput = {
    id?: string
    Prob_name: string
    DP_Order: number
    Prob_pic: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListProbUpdateManyMutationInput = {
    Prob_name?: StringFieldUpdateOperationsInput | string
    DP_Order?: IntFieldUpdateOperationsInput | number
    Prob_pic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListProbUncheckedUpdateManyInput = {
    Prob_name?: StringFieldUpdateOperationsInput | string
    DP_Order?: IntFieldUpdateOperationsInput | number
    Prob_pic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListUseProbCreateInput = {
    id?: string
    Prob_menu: string
    Prob_pickup: string
    pick_icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ListProb: ListProbCreateNestedOneWithoutListUseProbInput
  }

  export type ListUseProbUncheckedCreateInput = {
    id?: string
    Prob_menu: string
    Prob_pickup: string
    pick_icon: string
    listProbId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListUseProbUpdateInput = {
    Prob_menu?: StringFieldUpdateOperationsInput | string
    Prob_pickup?: StringFieldUpdateOperationsInput | string
    pick_icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ListProb?: ListProbUpdateOneRequiredWithoutListUseProbNestedInput
  }

  export type ListUseProbUncheckedUpdateInput = {
    Prob_menu?: StringFieldUpdateOperationsInput | string
    Prob_pickup?: StringFieldUpdateOperationsInput | string
    pick_icon?: StringFieldUpdateOperationsInput | string
    listProbId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListUseProbCreateManyInput = {
    id?: string
    Prob_menu: string
    Prob_pickup: string
    pick_icon: string
    listProbId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListUseProbUpdateManyMutationInput = {
    Prob_menu?: StringFieldUpdateOperationsInput | string
    Prob_pickup?: StringFieldUpdateOperationsInput | string
    pick_icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListUseProbUncheckedUpdateManyInput = {
    Prob_menu?: StringFieldUpdateOperationsInput | string
    Prob_pickup?: StringFieldUpdateOperationsInput | string
    pick_icon?: StringFieldUpdateOperationsInput | string
    listProbId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    UpdateAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    UpdateAt?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    clerkId?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    UpdateAt?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ListUseProbListRelationFilter = {
    every?: ListUseProbWhereInput
    some?: ListUseProbWhereInput
    none?: ListUseProbWhereInput
  }

  export type ListUseProbOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ListProbCountOrderByAggregateInput = {
    id?: SortOrder
    Prob_name?: SortOrder
    DP_Order?: SortOrder
    Prob_pic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ListProbAvgOrderByAggregateInput = {
    DP_Order?: SortOrder
  }

  export type ListProbMaxOrderByAggregateInput = {
    id?: SortOrder
    Prob_name?: SortOrder
    DP_Order?: SortOrder
    Prob_pic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ListProbMinOrderByAggregateInput = {
    id?: SortOrder
    Prob_name?: SortOrder
    DP_Order?: SortOrder
    Prob_pic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ListProbSumOrderByAggregateInput = {
    DP_Order?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ListProbScalarRelationFilter = {
    is?: ListProbWhereInput
    isNot?: ListProbWhereInput
  }

  export type ListUseProbCountOrderByAggregateInput = {
    id?: SortOrder
    Prob_menu?: SortOrder
    Prob_pickup?: SortOrder
    pick_icon?: SortOrder
    listProbId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ListUseProbMaxOrderByAggregateInput = {
    id?: SortOrder
    Prob_menu?: SortOrder
    Prob_pickup?: SortOrder
    pick_icon?: SortOrder
    listProbId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ListUseProbMinOrderByAggregateInput = {
    id?: SortOrder
    Prob_menu?: SortOrder
    Prob_pickup?: SortOrder
    pick_icon?: SortOrder
    listProbId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ListUseProbCreateNestedManyWithoutListProbInput = {
    create?: XOR<ListUseProbCreateWithoutListProbInput, ListUseProbUncheckedCreateWithoutListProbInput> | ListUseProbCreateWithoutListProbInput[] | ListUseProbUncheckedCreateWithoutListProbInput[]
    connectOrCreate?: ListUseProbCreateOrConnectWithoutListProbInput | ListUseProbCreateOrConnectWithoutListProbInput[]
    createMany?: ListUseProbCreateManyListProbInputEnvelope
    connect?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
  }

  export type ListUseProbUncheckedCreateNestedManyWithoutListProbInput = {
    create?: XOR<ListUseProbCreateWithoutListProbInput, ListUseProbUncheckedCreateWithoutListProbInput> | ListUseProbCreateWithoutListProbInput[] | ListUseProbUncheckedCreateWithoutListProbInput[]
    connectOrCreate?: ListUseProbCreateOrConnectWithoutListProbInput | ListUseProbCreateOrConnectWithoutListProbInput[]
    createMany?: ListUseProbCreateManyListProbInputEnvelope
    connect?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ListUseProbUpdateManyWithoutListProbNestedInput = {
    create?: XOR<ListUseProbCreateWithoutListProbInput, ListUseProbUncheckedCreateWithoutListProbInput> | ListUseProbCreateWithoutListProbInput[] | ListUseProbUncheckedCreateWithoutListProbInput[]
    connectOrCreate?: ListUseProbCreateOrConnectWithoutListProbInput | ListUseProbCreateOrConnectWithoutListProbInput[]
    upsert?: ListUseProbUpsertWithWhereUniqueWithoutListProbInput | ListUseProbUpsertWithWhereUniqueWithoutListProbInput[]
    createMany?: ListUseProbCreateManyListProbInputEnvelope
    set?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
    disconnect?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
    delete?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
    connect?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
    update?: ListUseProbUpdateWithWhereUniqueWithoutListProbInput | ListUseProbUpdateWithWhereUniqueWithoutListProbInput[]
    updateMany?: ListUseProbUpdateManyWithWhereWithoutListProbInput | ListUseProbUpdateManyWithWhereWithoutListProbInput[]
    deleteMany?: ListUseProbScalarWhereInput | ListUseProbScalarWhereInput[]
  }

  export type ListUseProbUncheckedUpdateManyWithoutListProbNestedInput = {
    create?: XOR<ListUseProbCreateWithoutListProbInput, ListUseProbUncheckedCreateWithoutListProbInput> | ListUseProbCreateWithoutListProbInput[] | ListUseProbUncheckedCreateWithoutListProbInput[]
    connectOrCreate?: ListUseProbCreateOrConnectWithoutListProbInput | ListUseProbCreateOrConnectWithoutListProbInput[]
    upsert?: ListUseProbUpsertWithWhereUniqueWithoutListProbInput | ListUseProbUpsertWithWhereUniqueWithoutListProbInput[]
    createMany?: ListUseProbCreateManyListProbInputEnvelope
    set?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
    disconnect?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
    delete?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
    connect?: ListUseProbWhereUniqueInput | ListUseProbWhereUniqueInput[]
    update?: ListUseProbUpdateWithWhereUniqueWithoutListProbInput | ListUseProbUpdateWithWhereUniqueWithoutListProbInput[]
    updateMany?: ListUseProbUpdateManyWithWhereWithoutListProbInput | ListUseProbUpdateManyWithWhereWithoutListProbInput[]
    deleteMany?: ListUseProbScalarWhereInput | ListUseProbScalarWhereInput[]
  }

  export type ListProbCreateNestedOneWithoutListUseProbInput = {
    create?: XOR<ListProbCreateWithoutListUseProbInput, ListProbUncheckedCreateWithoutListUseProbInput>
    connectOrCreate?: ListProbCreateOrConnectWithoutListUseProbInput
    connect?: ListProbWhereUniqueInput
  }

  export type ListProbUpdateOneRequiredWithoutListUseProbNestedInput = {
    create?: XOR<ListProbCreateWithoutListUseProbInput, ListProbUncheckedCreateWithoutListUseProbInput>
    connectOrCreate?: ListProbCreateOrConnectWithoutListUseProbInput
    upsert?: ListProbUpsertWithoutListUseProbInput
    connect?: ListProbWhereUniqueInput
    update?: XOR<XOR<ListProbUpdateToOneWithWhereWithoutListUseProbInput, ListProbUpdateWithoutListUseProbInput>, ListProbUncheckedUpdateWithoutListUseProbInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ListUseProbCreateWithoutListProbInput = {
    id?: string
    Prob_menu: string
    Prob_pickup: string
    pick_icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListUseProbUncheckedCreateWithoutListProbInput = {
    id?: string
    Prob_menu: string
    Prob_pickup: string
    pick_icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListUseProbCreateOrConnectWithoutListProbInput = {
    where: ListUseProbWhereUniqueInput
    create: XOR<ListUseProbCreateWithoutListProbInput, ListUseProbUncheckedCreateWithoutListProbInput>
  }

  export type ListUseProbCreateManyListProbInputEnvelope = {
    data: ListUseProbCreateManyListProbInput | ListUseProbCreateManyListProbInput[]
  }

  export type ListUseProbUpsertWithWhereUniqueWithoutListProbInput = {
    where: ListUseProbWhereUniqueInput
    update: XOR<ListUseProbUpdateWithoutListProbInput, ListUseProbUncheckedUpdateWithoutListProbInput>
    create: XOR<ListUseProbCreateWithoutListProbInput, ListUseProbUncheckedCreateWithoutListProbInput>
  }

  export type ListUseProbUpdateWithWhereUniqueWithoutListProbInput = {
    where: ListUseProbWhereUniqueInput
    data: XOR<ListUseProbUpdateWithoutListProbInput, ListUseProbUncheckedUpdateWithoutListProbInput>
  }

  export type ListUseProbUpdateManyWithWhereWithoutListProbInput = {
    where: ListUseProbScalarWhereInput
    data: XOR<ListUseProbUpdateManyMutationInput, ListUseProbUncheckedUpdateManyWithoutListProbInput>
  }

  export type ListUseProbScalarWhereInput = {
    AND?: ListUseProbScalarWhereInput | ListUseProbScalarWhereInput[]
    OR?: ListUseProbScalarWhereInput[]
    NOT?: ListUseProbScalarWhereInput | ListUseProbScalarWhereInput[]
    id?: StringFilter<"ListUseProb"> | string
    Prob_menu?: StringFilter<"ListUseProb"> | string
    Prob_pickup?: StringFilter<"ListUseProb"> | string
    pick_icon?: StringFilter<"ListUseProb"> | string
    listProbId?: StringFilter<"ListUseProb"> | string
    createdAt?: DateTimeFilter<"ListUseProb"> | Date | string
    updatedAt?: DateTimeFilter<"ListUseProb"> | Date | string
  }

  export type ListProbCreateWithoutListUseProbInput = {
    id?: string
    Prob_name: string
    DP_Order: number
    Prob_pic: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListProbUncheckedCreateWithoutListUseProbInput = {
    id?: string
    Prob_name: string
    DP_Order: number
    Prob_pic: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListProbCreateOrConnectWithoutListUseProbInput = {
    where: ListProbWhereUniqueInput
    create: XOR<ListProbCreateWithoutListUseProbInput, ListProbUncheckedCreateWithoutListUseProbInput>
  }

  export type ListProbUpsertWithoutListUseProbInput = {
    update: XOR<ListProbUpdateWithoutListUseProbInput, ListProbUncheckedUpdateWithoutListUseProbInput>
    create: XOR<ListProbCreateWithoutListUseProbInput, ListProbUncheckedCreateWithoutListUseProbInput>
    where?: ListProbWhereInput
  }

  export type ListProbUpdateToOneWithWhereWithoutListUseProbInput = {
    where?: ListProbWhereInput
    data: XOR<ListProbUpdateWithoutListUseProbInput, ListProbUncheckedUpdateWithoutListUseProbInput>
  }

  export type ListProbUpdateWithoutListUseProbInput = {
    Prob_name?: StringFieldUpdateOperationsInput | string
    DP_Order?: IntFieldUpdateOperationsInput | number
    Prob_pic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListProbUncheckedUpdateWithoutListUseProbInput = {
    Prob_name?: StringFieldUpdateOperationsInput | string
    DP_Order?: IntFieldUpdateOperationsInput | number
    Prob_pic?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListUseProbCreateManyListProbInput = {
    id?: string
    Prob_menu: string
    Prob_pickup: string
    pick_icon: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ListUseProbUpdateWithoutListProbInput = {
    Prob_menu?: StringFieldUpdateOperationsInput | string
    Prob_pickup?: StringFieldUpdateOperationsInput | string
    pick_icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListUseProbUncheckedUpdateWithoutListProbInput = {
    Prob_menu?: StringFieldUpdateOperationsInput | string
    Prob_pickup?: StringFieldUpdateOperationsInput | string
    pick_icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ListUseProbUncheckedUpdateManyWithoutListProbInput = {
    Prob_menu?: StringFieldUpdateOperationsInput | string
    Prob_pickup?: StringFieldUpdateOperationsInput | string
    pick_icon?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}